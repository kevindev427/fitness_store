###########
# BUILDER #
###########

# a temporary image that's used for building the Python wheels

# pull official base image
FROM python:3.8-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev \
    # install Pillow dependencies
    && apk --no-cache add sudo jpeg-dev zlib-dev openjpeg-dev \
    # install brotli dependency
    && apk --no-cache add build-base

# lint
RUN pip install --upgrade pip
RUN pip install flake8
COPY . .
RUN flake8 --ignore=E501,F401,W503 .

# install dependencies
COPY ./requirements/base.txt .
COPY ./requirements/production.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r production.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.8-alpine

# create directory for the app user
RUN mkdir -p /home/app
RUN mkdir -p /home/app/web

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web/app
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq curl
# get Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# install Pillow dependencies
RUN apk --no-cache add sudo jpeg-dev zlib-dev openjpeg-dev \
    # install scout-apm dependencies
    && apk add gcc musl-dev python3-dev libffi-dev openssl-dev
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/base.txt .
COPY --from=builder /usr/src/app/production.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint-prod.sh
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

# collect static files
RUN python manage.py collectstatic --noinput

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/app/entrypoint.prod.sh"]