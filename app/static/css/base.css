:root {
  /* typography */
  --measure: 60ch;

  /* colors */
  --main-color-light: #fff;
  --main-color-dark: #1d1d1d;
  --main-color-light-gray: #ededed;
  --main-color-dark-gray: #1d1d1de0;
  --main-color-money: #5f9341;
  --main-color-accent: #31759d;
  --google-blue: #4c8bf5;
  --facebook-blue: #1877F2;
  --debug: #ddccff;
  --info: #cceeff;
  --success: #ccffdd;
  --warning: #ffddcc;
  --error: #ffcccc;

  /* modular scale */
  --ratio: 1.5;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  --stack-space: var(--s1);
  --stack-page-space: var(--s0);
  --border-thin: var(--s-5);
}

* {
  max-width: var(--measure);
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  line-height: 1.5;
  font-size: 16px;
}

a,
button,
html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}

span {
  font-size: 1em;
}

input {
  padding: var(--s-1);
  border: var(--border-thin) solid;
  color: var(--main-color-dark-gray);
  background-color: var(--main-color-light);
  box-shadow: 2px 3px var(--main-color-dark-gray);
}

input * {
  color: inherit;
}

input.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

/*
    THE BUTTON

    Based off of THE BOX
*/
button,
.button {
  display: inline-block;
  text-decoration: none;
  cursor: pointer;
  padding: var(--s-2);
  border: 0 solid;
  outline: var(--border-thin) solid transparent; /* for high contrast mode */
  outline-offset: calc(var(--border-thin) * -1);
  color: var(--main-color-light-gray);
  background-color: var(--main-color-dark);
  box-shadow: 2px 3px var(--main-color-dark-gray)
}

button:hover,
button:focus,
.button:hover,
.button:focus {
  /* box-shadow: 0 0 0 10px var(--main-color-dark); */
  text-decoration: underline;
}

img {
  max-width: 100%;
}

ul {
  padding: revert;
}

/*
    FORMS
*/

input[type="radio"] {
  color: var(--main-color-accent);
  font-size: var(--s4);
}

fieldset {
  border: none;
}

.stack-form fieldset {
  margin-top: 0;
  padding: var(--s1);
  border: var(--s-5) solid var(--main-color-dark-gray);
}

/* make sure .stack-form doesn't combine with .box padding */
.stack-form fieldset div:first-of-type {
  margin-top: 0;
}

legend {
  background: var(--main-color-dark-gray);
  color: var(--main-color-light-gray);
  padding: var(--s-3);
  font-size: var(--s-1);
}


/*
    TYPOGRAPHY
*/
h1 {
  font-size: var(--s3);
  text-align: center;
}

h2 {
  font-size: var(--s2);
}

h3 {
  font-size: var(--s1);
}

h4 {
  font-size: var(--s0);
}

h5 {
  font-size: var(--s-1);
}

h6 {
  font-size: var(--s-2);
}

a {
  color: var(--main-color-accent);
}

a:hover,
a:focus,
a:active {
  color: var(--main-color-light-gray);
  background-color: var(--main-color-dark);
}

/*
    TYPOGRAPHY EXCEPTIONS
*/
.product-switcher h1 {
  text-align: unset;
}

/* 
    THE STACK

    Description: use with modular scale system for consistent appearance

    Usage: place children inside div.stack

    Ex:
      <div class="stack">
        <div><!-- child --></div>
        <div><!-- child --></div>
        <div><!-- child --></div>
      </div>
*/
.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--stack-space);
}

.stack-all {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-all * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack-all * + * {
  margin-top: var(--stack-space);
}

.stack-auth-form {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-auth-form * {
  margin-top: 0;
  margin-bottom: 0;
} 

.stack-auth-form * + * {
  margin-top: var(--s-5);
}

.stack-auth-form > form > * + * {
  margin-top: var(--s1);
}

.stack-form {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-form * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack-form * + * {
  margin-top: var(--stack-space);
}

.stack-page {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-page > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack-page > * + * {
  margin-top: var(--stack-page-space);
}

.stack-page:only-child {
  height: 100%;
}

.stack-page > :nth-child(1) {
  margin-bottom: auto;
}

/*
    THE CENTER
*/
.center {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--measure);
}

/*
    THE BOX

    Description: the best box is one that fits the content and no more. Padding should
    be applied evenly to all sides. Use utility class margin to get specific
    placement.

    Usage: place contents inside div.box

    Ex:
      <div class="box">
        <!-- content here -->
      </div>
*/
.box,
.errorlist li {
  padding: var(--s1);
  border: 0 solid;
  outline: var(--border-thin) solid transparent; /* for high contrast mode */
  outline-offset: calc(var(--border-thin) * -1);
  --color-light: #fff;
  --color-dark: #000;
  color: var(--color-dark);
  background-color: var(--color-light);
}

.box > *,
.errorlist li > * {
  color: inherit;
}

.errorlist li {
  background-color: var(--error);
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

.box.invert.download:hover {
  background: repeating-linear-gradient(-45deg, var(--color-dark), var(--color-dark) 5px, var(--main-color-dark) 5px, var(--main-color-dark) 10px);
}

.box.purchase {
  letter-spacing: 0.2ch;
  font-family: monospace;
  font-size: var(--s0);
  font-weight: 700;
  color: var(--main-color-light);
  background-color: var(--main-color-accent);
}

.box.login {
  padding: var(--s-2);
  text-align: center;
  border: var(--s-5) solid var(--main-color-dark-gray);
  text-decoration: none;
  box-shadow: 3px 2px var(--main-color-dark-gray);
}

.box.login h2 {
  font-size: unset;
  font-weight: unset;
}

a.box.login:hover,
a.box.login:focus {
  color: unset;
  background-color: unset;
  text-decoration: underline;
}

a.box.login:active {
  opacity: 0.8;
}

.or-separator {
  display: flex;
  align-items: center;
}

.or-separator i {
  padding: 3px;
  font-size: 18px;
  color: #6f6f6f;
}

.or-separator > div {
  flex: 1;
  height: 1px;
  background-color: #cac7c7;
}

.box.login.facebook {
  /* color: var(--facebook-blue); */
  /* background-color: var(--facebook-blue); */
}

.box.login.google {
  /* color: var(--google-blue); */
  /* background-color: var(--main-color-light); */
}

/*
    THE CARD BOX

    Description: just a BOX with no padding and an outline

    Usage: see above

    Adapted from: 
    * https://inclusive-components.design/cards/
    * https://every-layout.dev/layouts/box/
*/
.card-box {
  --color-light: #fff;
  --color-dark: #000;
  padding: 0;
  border: var(--border-thin) solid;
  color: var(--color-dark);
  background-color: var(--color-light);
  position: relative;
  overflow: hidden;
  border-radius: var(--s-2);
}

.card-box * {
  color: inherit;
}

.card-box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

.card-box a {
  text-decoration: none;
}

.card-box a:hover,
.card-box a:focus {
  color: inherit;
  background-color: inherit;
  outline: none;
}

/* make the whole card clickable */
.card-box a::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

/* affordance - show user that the whole card is clickable */
.card-box:hover {
  box-shadow: 0 0 0 var(--s-5);
}

/* a fallback for old browers */
.card-box:focus {
  text-decoration: underline;
}

/* add fancy outline */
.card-box:focus-within {
  box-shadow: 0 0 0 var(--s-5);
}

/* remove fallback style if browser is new and hip */
.card-box:focus-within a:focus {
  text-decoration: none;
}

/*
    THE CARD STACK

    Description: get the less important things to line up on the bottom
*/
.card-stack h3 {
  margin: 0;
}

.card-stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.card-stack > * {
  margin-top: 0;
  margin-bottom: 0;
} 

.card-stack > * + * {
  margin-top: var(--s-1);
}

.card-stack:only-child {
  height: 100%;
}

.card-stack > :nth-child(2) {
  margin-bottom: auto;
}

/*
    THE SIDEBAR
*/
.with-sidebar {
  overflow: hidden;
}

.with-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--s1) / 2 * -1);
}

.with-sidebar > * > * {
  margin: calc(var(--s1) / 2);
  flex-grow: 1;
}

.with-sidebar > * > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(50% - var(--s1));
}

/*
    THE CLUSTER

    Description: a group of items that should stay close together

    Usage: use intermediary wrapper between items and the outer div.cluster

    Ex:
      <div class="cluster">
        <div> <!-- intermediary wrapper -->
          <div><!-- child --></div>
          <div><!-- child --></div>
          <div><!-- etc --></div>
        </div>
      </div>
*/
/* generic cluster */
.cluster {
  --cluster-space: var(--s0);
  overflow: hidden;
}

.cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--cluster-space) / 2 * -1);
}

.cluster > * > * {
  margin: calc(var(--cluster-space) / 2);
}

/* logo and right-aligned menu */
.nav-cluster {
  --nav-space: var(--s1);
  overflow: hidden;
}

.nav-cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  margin: calc(var(--nav-space) / 2 * -1);
}

.nav-cluster > * > * {
  margin: calc(var(--nav-space) / 2);
}

/* the <a> tags in nav bar */
.menu-cluster {
  --menu-space: var(--s-1);
  overflow: hidden;
}

.menu-cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--menu-space) / 2 * -1);
}

.menu-cluster > * > * {
  margin: calc(var(--menu-space) / 2);
}

/*
    THE SIDEBAR

    Description: Sidebar has suggested width, main content adapts width until
    it becomes too thin to tolerate.
    
    Usage: div.with-sidebar, intemediary wrapper, then side bar and non-sidebar 
    as children

    Ex: 
    <div class="with-sidebar">
      <div> <!-- intermediary wrapper -->
        <div><!-- sidebar --></div>
        <div><!-- non-sidebar --></div>
      </div>
    </div>
*/
.with-sidebar {
  overflow: hidden;
}

.with-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--s5) / 2 * -1);
}

.with-sidebar > * > * {
  margin: calc(var(--s5) / 2);
  flex-basis: 40vw;
  flex-grow: 1;
}

.with-sidebar > * > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(50% - var(--s5));
}

/*
    THE SWITCHER

    Description: switch between horizontal and vertical layouts
    
    Usage: use intermediary wrapper between div.product-switcher and child elements

    Ex:
      <div class="product-switcher">
        <div> <!-- intermediary wrapper -->
          <div><!-- child element --></div>
          <div><!-- another child element --></div>
          <div><!-- etc --></div>
        </div>
      </div>
*/
.product-switcher > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc((var(--s3) / 2) * -1);
}

.product-switcher > * > * {
  flex-grow: 1;
  flex-basis: calc((var(--measure) - (100% - var(--s3))) * 999);
  margin: calc(var(--s3) / 2);
}

.product-switcher > * > :nth-last-child(n+3),
.product-switcher > * > :nth-last-child(n+3) ~ * {
  flex-basis: 100%;
}

/*
    THE GRID

    Usage: place child elements inside div.grid

    Ex:
      <div class="grid">
        <div class="box">One</div>
        <div class="box">Two</div>
        <div class="box">Three</div>
      </div>
*/
ul.grid {
  padding: 0;
}

.grid {
  display: grid;
  grid-gap: var(--s0);
}

@supports (width: min(250px, 100%)) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
  }
}

/*
    THE FRAME

    Usage: place the image or video inside a div.frame. Must be used in
    conjunction with a size declaration, such as .landscape or .portrait.

    Ex:
      <div class="frame">
        <img src="image.png">
      </div>
*/
.landscape.frame {
  --n: 9;
  --d: 16;
}

.movie.frame {
  --n: 9;
  --d: 24;
}

.portrait.frame {
  --n: 4;
  --d: 3;
}

.frame {
  /* --n: 9; */
  /* --d: 16; */
  padding-bottom: calc(var(--n) / var(--d) * 100%);
  position: relative;
}

.frame > * {
  overflow: hidden;
  position: absolute; /* ok bc bound to frame */
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame > img,
.frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.frame > img {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 calc(100% - 1rem));
}

/*
    THE ICON

    Description: proper sizing and spacing for icons

    Usage: 
    <span class="with-icon">
      <svg class="icon">
        <use href="/path/to/icons.svg#my-icon"></use>
      </svg>
      Download
    </span>
*/
.icon {
  width: 0.75em;
  width: 1cap;
  height: 0.75em;
  height: 1cap;
}

.with-icon {
  display: inline-flex;
  align-items: baseline;
}

.with-icon .icon {
  margin-inline-end: 1rem;
  font-size: 100%;
}

/*
    THE TAG

    Description: small text with a fun color background

    Usage: just wrap in span.tag
*/
.tag {
  color: var(--main-color-light);
  background-color: var(--main-color-dark);
  padding: var(--s-5) var(--s-3);
  border-radius: var(--s0);
  font-size: var(--s-1);
}

.tag.price {
  background-color: var(--main-color-money);
}

.tag.duration {
  background-color: var(--main-color-dark-gray);
}

.tag.frequency {
  background-color: var(--main-color-dark-gray);
}

/*
    UTILITY CLASSES
*/
.max-width\:measure {
  max-width: var(--measure);
}

.max-width\:measure\*2 {
  max-width: calc(var(--measure) * 2);
}

.max-width\:measure\/2 {
  max-width: calc(var(--measure) / 2);
}

.padding\:s0 {
  padding: var(--s0);
}

.padding\:s-1 {
  padding: var(--s-1);
}

.padding\:s-2 {
  padding: var(--s-2);
}

.space-between {
  display: flex;
  justify-content: space-between;
  align-items: baseline;
}

.font-size\:big {
  font-size: var(--s3);
}

.font-size\:biggish {
  font-size: var(--s2);
}

.font-size\:smallish {
  font-size: var(--s1);
}

.font-size\:small {
  font-size: var(--s-1);
}

.text-center {
  text-align: center;
}

.money {
  color: var(--main-color-money);
  font-weight: 700;
}

.debug {
  background-color: var(--debug);
}

.info {
  background-color: var(--info);
}

.success {
  background-color: var(--success);
}

.warning {
  background-color: var(--warning);
}

.error {
  background-color: var(--error);
}


/*
    CUSTOMIZING ELEMENTS
*/
.navbar {
  background-color: var(--main-color-dark);
  color: var(--main-color-light-gray);
}

.navbar a {
  color: var(--main-color-light-gray);
  text-decoration: none;
}

.navbar a:hover {
  color: var(--main-color-light);
  text-decoration: underline;
}

.nav-menu ul {
  list-style-type: none;
}

.logo {
  font-weight: 700;
}

.content {
  background-color: var(--main-color-light);
  padding: var(--s1);
  min-height: 66.666vh;
}

.footer {
  color: var(--main-color-light-gray);
  background: var(--main-color-dark);
  padding: var(--s1);
}

.footer a {
  font-weight: 700;
  color: var(--main-color-light-gray);
  text-decoration: none;
}

.footer a:hover {
  color: var(--main-color-light);
  text-decoration: underline;
}

.navbar a:focus,
.navbar a:active,
.footer a:focus,
.footer a:active {
  color: var(--main-color-dark);
  background-color: var(--main-color-light-gray);
}

.messages ul {
  list-style-type: none;
  padding: 0;
}

.messages li {
  margin-bottom: var(--s1);
}

.messages li:last-child {
  margin-bottom: 0;
}

.messages .errorlist {
  background-color: var(--error);
}