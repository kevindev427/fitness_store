:root {
  /* typography */
  --measure: 60ch;
  font-family: sans-serif;
  line-height: 1.5;

  /* colors */
  --main-color-light: #fff;
  --main-color-dark: #1d1d1d;

  /* modular scale */
  --ratio: 1.5;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));
}

* {
  max-width: var(--measure);
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}

img {
  max-width: 100%;
}

h1 {
  font-size: var(--s3);
}

h2 {
  font-size: var(--s2);
}

h3 {
  font-size: var(--s1);
}

h4 {
  font-size: var(--s0);
}

h5 {
  font-size: var(--s-1);
}

h6 {
  font-size: var(--s-2);
}

h2,
h3,
h4,
h5,
h6 {
  margin-top: var(--s1);
  margin-bottom: var(--s-3);
}

p {
  margin-bottom: var(--s0);
}

/* 
    THE STACK

    Description: use with modular scale system for consistent appearance

    Usage: place children inside div.stack

    Ex:
      <div class="stack">
        <div><!-- child --></div>
        <div><!-- child --></div>
        <div><!-- child --></div>
      </div>
*/
.stack {
  --space: var(--s1);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space);
}

.stack-page {
  --page-space: 0rem;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-page > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack-page > * + * {
  margin-top: var(--page-space);
}

.stack-page:only-child {
  height: 100%;
}

.stack-page > :nth-child(1) {
  margin-bottom: auto;
}

/*
    THE CENTER
*/
.center {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--measure);
}

/*
    THE BOX

    Description: the best box is one that fits the content and no more. Padding should
    be applied evenly to all sides. Use utility class margin to get specific
    placement.

    Usage: place contents inside div.box

    Ex:
      <div class="box">
        <!-- content here -->
      </div>
*/
.box {
  padding: var(--s1);
  border: 0 solid;
  outline: var(--border-thin) solid transparent; /* for high contrast mode */
  outline-offset: calc(var(--border-thin) * -1);
  --color-light: #fff;
  --color-dark: #000;
  color: var(--color-dark);
  background-color: var(--color-light);
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

/*
    THE CARD BOX

    Description: just a BOX with no padding and an outline

    Usage: see above

    Adapted from: 
    * https://inclusive-components.design/cards/
    * https://every-layout.dev/layouts/box/
*/
.card-box {
  --border-thin: var(--s-5);
  --color-light: #fff;
  --color-dark: #000;
  padding: 0;
  border: var(--border-thin) solid;
  color: var(--color-dark);
  background-color: var(--color-light);
  position: relative;
  overflow: hidden;
  border-radius: var(--s-2);
}

.card-box * {
  color: inherit;
}

.card-box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

.card-box a {
  text-decoration: none;
}

/* make the whole card clickable */
.card-box a::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

/* affordance - show user that the whole card is clickable */
.card-box:hover {
  box-shadow: 0 0 0 var(--s-5);
}

/* a fallback for old browers */
.card-box:focus {
  text-decoration: underline;
}

/* add fancy outline */
.card-box:focus-within {
  box-shadow: 0 0 0 var(--s-5);
}

/* remove fallback style if browser is new and hip */
.card-box:focus-within a:focus {
  text-decoration: none;
}

/*
    THE CARD STACK

    Description: get the less important things to line up on the bottom
*/
.card-stack h3 {
  margin: 0;
}

.card-stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.card-stack * {
  margin-top: 0;
  margin-bottom: 0;
} 

.card-stack * + * {
  margin-top: var(--s-1);
}

.card-stack:only-child {
  height: 100%;
}

.card-stack > :nth-child(2) {
  margin-bottom: auto;
}

/*
    THE SIDEBAR
*/
.with-sidebar {
  overflow: hidden;
}

.with-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--s1) / 2 * -1);
}

.with-sidebar > * > * {
  margin: calc(var(--s1) / 2);
  flex-grow: 1;
}

.with-sidebar > * > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(50% - var(--s1));
}

/*
    THE CLUSTER

    Description: a group of items that should stay close together

    Usage: use intermediary wrapper between items and the outer div.cluster

    Ex:
      <div class="cluster">
        <div> <!-- intermediary wrapper -->
          <div><!-- child --></div>
          <div><!-- child --></div>
          <div><!-- etc --></div>
        </div>
      </div>
*/
/* generic cluster */
.cluster {
  --space: var(--s0);
  overflow: hidden;
}

.cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--space) / 2 * -1);
}

.cluster > * > * {
  margin: calc(var(--space) / 2);
}

/* logo and right-aligned menu */
.nav-cluster {
  --space: var(--s2);
  overflow: hidden;
}

.nav-cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  margin: calc(var(--space) / 2);
}

.nav-cluster > * > * {
  margin: calc(var(--space) / 2);
}

/* the <a> tags in nav bar */
.menu-cluster {
  --space: var(--s0);
  overflow: hidden;
}

.menu-cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--space) / 2);
}

.menu-cluster > * > * {
  margin: calc(var(--space) / 2);
}

/*
    THE GRID

    Usage: place child elements inside div.grid

    Ex:
      <div class="grid">
        <div class="box">One</div>
        <div class="box">Two</div>
        <div class="box">Three</div>
      </div>
*/
ul.grid {
  padding: 0;
}

.grid {
  display: grid;
  grid-gap: var(--s0);
}

@supports (width: min(250px, 100%)) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
  }
}

/*
    THE FRAME

    Usage: place the image or video inside a div.frame

    Ex:
      <div class="frame">
        <img src="image.png">
      </div>
*/
.frame {
  --n: 9;
  --d: 16;
  padding-bottom: calc(var(--n) / var(--d) * 100%);
  position: relative;
}

.frame > * {
  overflow: hidden;
  position: absolute; /* ok bc bound to frame */
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame > img,
.frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.frame > img {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 calc(100% - 1rem));
}

/*
    UTILITY CLASSES
*/
.max-width\:measure {
  max-width: var(--measure);
}

.max-width\:measure\*2 {
  max-width: calc(var(--measure) * 2);
}

.max-width\:measure\/2 {
  max-width: calc(var(--measure) / 2);
}

.padding\:s0 {
  padding: var(--s0);
}

.padding\:s-1 {
  padding: var(--s-1);
}

.padding\:s-2 {
  padding: var(--s-2);
}

/*
    CUSTOMIZING ELEMENTS
*/
.navbar {
  background-color: var(--main-color-dark);
  color: var(--main-color-light);
}

.navbar a {
  color: var(--main-color-light);
}

.nav-menu ul {
  list-style-type: none;
  /* margin: 0; */
}

.logo {
  font-family: serif;
  font-weight: 700;
  letter-spacing: 0.2ch;
}

.content {
  background-color: var(--main-color-light);
  padding-top: var(--s1);
  padding-bottom: var(--s1);
  min-height: 66.666vh;
}

.footer {
  color: var(--main-color-light);
  background: var(--main-color-dark);
  padding-top: var(--s1);
  padding-bottom: var(--s1);
}

.footer a {
  color: var(--main-color-light);
}
